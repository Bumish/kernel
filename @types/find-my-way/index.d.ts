// Type definitions for find my way router
// Project: https://github.com/delvedor/find-my-way
// Definitions by: Dmitry Rodin <https://github.com/madiedinro>
// TypeScript Version: 2.7

/// <reference types="node" />

declare module 'find-my-way' {

  import { IncomingMessage, ServerResponse } from 'http';

  type RouteParams = { [key: string]: string };
  type RouteStore = { [key: string]: any };
  type RouteResult = { [key: string]: any };

  interface RequestHandler {
    // (req: IncomingMessage, res: ServerResponse, params: RouteParams, store: RouteStore): any
    (result: RouteResult): any
  }

  interface RouterOptions {
    defaultRoute: RequestHandler;
    ignoreTrailingSlash: boolean
  }

  interface RouterResult {
    method: string;
    path: string;
    handler: RequestHandler;
    store: RouteStore;
    params?: RouteParams;
  }

  class Router {
    constructor(opts?: RouterOptions);
    on(method: string, path: string, handler: RequestHandler, store?: RouteStore): void;
    get(path: string, handler: RequestHandler, store?: RouteStore): void;
    post(path: string, handler: RequestHandler, store?: RouteStore): void;
    options(path: string, handler: RequestHandler, store?: RouteStore): void;
    all(path: string, handler: RequestHandler, store?: RouteStore): void;
    lookup(req: IncomingMessage, res: ServerResponse): void;
    find(method: string, path: string): RouterResult | undefined;
    prettyPrint(): string;
  }

  namespace Router { }
  export = Router;
}

/** Declaration file generated by dts-gen */

// export = find_my_way;

// declare class find_my_way {

//     constructor(opts: any);

//     acl(path: any, handler: any, store: any): any;

//     all(path: any, handler: any, store: any): void;

//     bind(path: any, handler: any, store: any): any;

//     checkout(path: any, handler: any, store: any): any;

//     connect(path: any, handler: any, store: any): any;

//     copy(path: any, handler: any, store: any): any;

//     delete(path: any, handler: any, store: any): any;

//     find(method: any, path: any): any;

//     get(path: any, handler: any, store: any): any;

//     head(path: any, handler: any, store: any): any;

//     link(path: any, handler: any, store: any): any;

//     lock(path: any, handler: any, store: any): any;

//     lookup(req: any, res: any): any;

//     "m-search"(path: any, handler: any, store: any): any;

//     merge(path: any, handler: any, store: any): any;

//     mkactivity(path: any, handler: any, store: any): any;

//     mkcalendar(path: any, handler: any, store: any): any;

//     mkcol(path: any, handler: any, store: any): any;

//     move(path: any, handler: any, store: any): any;

//     notify(path: any, handler: any, store: any): any;

//     off(method: any, path: any): any;

//     on(method: any, path: any, handler: any, store: any): void;

//     options(path: any, handler: any, store: any): any;

//     patch(path: any, handler: any, store: any): any;

//     post(path: any, handler: any, store: any): any;

//     prettyPrint(): any;

//     propfind(path: any, handler: any, store: any): any;

//     proppatch(path: any, handler: any, store: any): any;

//     purge(path: any, handler: any, store: any): any;

//     put(path: any, handler: any, store: any): any;

//     rebind(path: any, handler: any, store: any): any;

//     report(path: any, handler: any, store: any): any;

//     reset(): void;

//     search(path: any, handler: any, store: any): any;

//     subscribe(path: any, handler: any, store: any): any;

//     trace(path: any, handler: any, store: any): any;

//     unbind(path: any, handler: any, store: any): any;

//     unlink(path: any, handler: any, store: any): any;

//     unlock(path: any, handler: any, store: any): any;

//     unsubscribe(path: any, handler: any, store: any): any;

// }

// declare namespace find_my_way {

//   function acl(path: any, handler: any, store: any): any;

//   function all(path: any, handler: any, store: any): void;

//   function bind(path: any, handler: any, store: any): any;

//   function checkout(path: any, handler: any, store: any): any;

//   function connect(path: any, handler: any, store: any): any;

//   function copy(path: any, handler: any, store: any): any;

//   function find(method: any, path: any): any;

//   function get(path: any, handler: any, store: any): any;

//   function head(path: any, handler: any, store: any): any;

//   function link(path: any, handler: any, store: any): any;

//   function lock(path: any, handler: any, store: any): any;

//   function lookup(req: any, res: any): any;

//   function merge(path: any, handler: any, store: any): any;

//   function mkactivity(path: any, handler: any, store: any): any;

//   function mkcalendar(path: any, handler: any, store: any): any;

//   function mkcol(path: any, handler: any, store: any): any;

//   function move(path: any, handler: any, store: any): any;

//   function notify(path: any, handler: any, store: any): any;

//   function off(method: any, path: any): any;

//   function on(method: any, path: any, handler: any, store: any): void;

//   function options(path: any, handler: any, store: any): any;

//   function patch(path: any, handler: any, store: any): any;

//   function post(path: any, handler: any, store: any): any;

//   function prettyPrint(): any;

//   function propfind(path: any, handler: any, store: any): any;

//   function proppatch(path: any, handler: any, store: any): any;

//   function purge(path: any, handler: any, store: any): any;

//   function put(path: any, handler: any, store: any): any;

//   function rebind(path: any, handler: any, store: any): any;

//   function report(path: any, handler: any, store: any): any;

//   function reset(): void;

//   function search(path: any, handler: any, store: any): any;

//   function subscribe(path: any, handler: any, store: any): any;

//   function trace(path: any, handler: any, store: any): any;

//   function unbind(path: any, handler: any, store: any): any;

//   function unlink(path: any, handler: any, store: any): any;

//   function unlock(path: any, handler: any, store: any): any;

//   function unsubscribe(path: any, handler: any, store: any): any;

// }

